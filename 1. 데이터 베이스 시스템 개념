데이터는 컴퓨터에 저장되어 활용할 수 있는 정보

행정, 의료, 성적, 실험 등을 위해 사용된다.

이러한 데이터가 특정 목적을 위해 적절한 구조를 갖고 집합 한 것이 데이터베이스

- 실세계 일부를 표현하는 연관된 데이터들의 집합(모든 데이터가 아닌 목적이 있는 데이터)

 
데이터베이스 관리 시스템(DBMS)

- 데이터를 잘 관리할 수 있도록 도와주는 소프트웨어

- 운영체제와 유사하며 데이터의 생성과 관리를 담당(데이터를 바로 비스트림으로써 접근이 아닌 추상화한다) EX) ORACLE, SQLite, MySQL, MS SQL-Server

 
데이터베이스 시스템

- 데이터베이스 + 관리 소프트웨어(DBMS +　응용 프로그램)


DBMS에서 하는 큰 중요한 2가지의 일은 쿼리(데이터에 대한 탐색, 변경)와 데이터 접근(효과적이고 빠른 접근)이다.

데이터 베이스의 예제

방대한 데이터 베이스 규모 예제

미국 납세자의 세금 데이터베이스: 2억명 x 5자료/명 x 400바이트/명/년/자료 x 3년/명 = 1.6TB

 
하나의 데이터 베이스 안에(모든 테이블안에) 한꺼번에 집어넣는 것이 아닌 관련된 개체인 entity를 확인 후 해당 개체들별로 테이블을 분리하여 저장하며 중복 회피 등을 도모한다.

테이블의 예시는 속성인 attribute와 실제 데이터인 instance로 분류한다.

스미스의 학번을 검색하라 -> select num from student where name = 'smith'



데이터 베이스의 특징

* 데이터 베이스는 자기 기술성(self-describing)이 있다.

데이터 자체 뿐만 아니라 데이터에 대한 정의나 의미까지 관리(데이터 베이스는 데이터가 어떤 방식으로 저장되어 있는지에 대한 정보를 가진다.(txt는 갖지 않는다.))

메타 데이터: 데이터베이스 자체에 대한 정보(데이터 베이스의 데이터 베이스)

데이터 베이스 카탈로그: 메타 데이터가 저장되어 있는 데이터 베이스

 
* 프로그램과 데이터의 분리 -> 프로그램 데이터의 독립성

파일에서는 프로그램에 대한 정보를 파일이 갖고 있어야 하며 변경 시 파일에도 변경이 필요하다.

데이터베이스의 경우 데이터가 저장된 구조가 변경되더라도 프로그램에는 큰 영향을 미치지 않는다.

 
* 데이터 추상화

데이터들은 실제로는 로우 레벨로 저장되어 있으나 사용자는 테이블의 형태로 데이터 베이스를 통해 볼 수 있다.

관계형 테이터 베이스의 경우 테이블 형태로 보여주는 것이며 xml이나 json과 같이 트리형태의 스트럭쳐로 보여주는 경우(데이터 모델)도 있다.

 
* 데이터에 대한 다양한 뷰 제공

테이블에 대해 가공하여 전체의 테이블이 아닌 필요한 부분에 대한 가상의 테이블인 뷰를 제공한다.

 
* 데이터 공유와 다수 사용자 트랜잭션 처리

여러 사용자간의 손쉬운 데이터 공유

동시에 사용하더라도 일관성을 보장하기 위한 동시성 제어기능 제공(동시에 접속하더라도 한순간에 한명만이 접근한 것과 같은 처리)

트랜잭션: db 작업을 수행하는 단위 프로세스

- 고립성: 트랜잭션이 마치 혼자서 수행된 것 같아야 한다.

- 원자성: 트랜잭션 처리 중 중단이 발생하더라도 해당 이벤트에 대해 수행의 o/x 여부만을 판단한다. 즉, 1000원을 송금 중 문제가 발생하더라도 100원을 보냈거나 2000원을 보냈다의 개념이 아닌 1000원을 보냈는지 안 보냈는지에 대한 판단만을 수행한다.

 
 
데이터 베이스의 사용자 분류

데이터 베이스 설계자, 데이터 베이스 응용 개발자, 데이터 베이스 관리자, 데이터 베이스 사용자

 
* 데이터 베이스 설계자

데이터 베이스의 설계를 책임진 사람(중복 등의 문제가 없도록 요구 사항을 분석하여 모델링하여 테이블 분리 형성), 실세계 현상을 모델링하는 기술이 요구된다.(ERD, FD)

 
* 데이터 베이스 응용 개발자

실제적으로 백 엔드의 데이터 베이스에 접근하여 트랜잭션을 만든다.

그래픽 인터페이스 구현을 통해 최종 사용자에게 편의성 제공



* 데이터 베이스 최종 사용자

초보 사용자: 실질적 구조는 모르지만 해당 데이터 베이스에 대해 사용을 하는 사용자

전문 사용자: 쿼리등의 질문을 통해 보다 전문적으로 사용하는 사용자

 
* 데이터 베이스 관리자(DBA: databse administrator)

데이터 베이스의 성능을 모니터링하고 튜닝하며 여러 사용자에 대한 권한등을 관리한다.

데이터 베이스의 관리자는 프로그래머와 달리 독립적인 직군이며 데이터 베이스, 컴퓨터 시스템, 네트워크에 대한 많은 지식과 경험이 요구된다.

 
* 데이터 베이스 설계 및 구현자(무대 뒤의 사람들)

DBMS 소프트웨어 자체를 설계하고 구현하는 업무를 담당하는 사람들

응용 및 시스템 프로그래밍에 익숙하고 DB이론에 해박한 전문가

 
 
데이터 베이스의 장점

* 데이터 중복성의 제어 및 중복의 최소화, 일치성 보장과 저장공간 낭비 방지

 
* 보안 기능

특정 사용자에 대한 데이터 접근 권한을 DBA가 부여하여 관리한다.

 
* 지속성 기억 공간 제공

프로그램의 수행이 끝나더라도 해당 값을 기억할 수 있다.

 
* 효율적 질의처리를 위한 저장 구조 제공

만족하는 데이터의 빠른 탐색

 
* 백업과 회복 기능 제공

시스템에 문제가 발생해도 데이터의 손실없이 원상태로의 회복 지원

 
* 다수의 사용자 인터페이스 제공

 
* 데이터간 복잡한 관계의 체계적 표현

테이블의 구조와 관리를 DBMS를 통해 해결

 
* 데이터 베이스의 무결성 제약 조건의 시행

잘못된 값의 입력에 대해 DBMS가 자체적으로 확인하여 제어한다.

 
* 동시성 제어 기능 제공( 트랜잭션 )

여러 명의 사용에도 혼자 사용함과 같은 효과 제공

 
* 데이터 독립성 제공( 데이터와 응용 프로그램의 분리를 통한 추상 접근 )

데이터 베이스를 사용하지 않아도 좋은 경우

* DBMS사용을 통한 비용의 증가

프로그램에 대한 사용 비용과 이를 운용하기 위한 하드웨어적 비용이 요구될 수 있다.

 
* 언제 필요하지 않은가

단순한 경우 데이터 베이스를 통해 관리할 이유가 없다.

다수 사용자의 데이터 접근이 아닌 경우

DBMS를 통한 오버헤드가 발생할 수 있기에 latency(응답시간)이 중요한 임베디드 시스템과 같은 경우, 이를 해결하기 위해 응답 속도에 특화된 실시간 DBMS가 있다.(디스크가 아닌 메모리 상에서 데이터 베이스를 접근)
