데이터 모델

모델이란 세상의 실제를 단순화하여 표현한 것

ex) medical training model, uml model, map, simulink state space model

 
데이터 모델은 현실 세계에 존재하는 데이터를 컴퓨터상에서 알기 쉽게 표현한 것을 말하며 이를 데이터 베이스로 옮기는 것이 데이터 모델링이다.

- 데이터 베이스 구조(데이터 타입, 관계)와 제약 조건들을 표현하기 위해 사용할 수 있는 개념들의 집합이기도 하다.

데이터 베이스의 구조: 트리(xml), 테이블(레코드들의 집합), 그래프

구조뿐만 아니라 데이터 베이스에서 검색과 갱신을 수행하는 기본 연산들을 포함한다.

 
데이터 모델의 분류

* 개념적(고수준) 데이터 모델

데이터를 추상적으로 표현

사용자들이 데이터를 인식하는 방식에 대한 개념 제공

하드웨어 독립적, 일반인이 이해하기 쉬움

객체 관계 다이어그램: 개체, 속성, 관계 -> 모델 자체의 구현은 어렵다.

 
* 표현 데이터 모델

고수준 모델과 저수준 모델 사이에 존재

일반 사용자들이 이해할 수 있는 개념 제공

데이터 저장 구조의 세부 사항을 은폐하지만, 컴퓨터 상에서 직접 구현 가능

상용 DBMS에서 많이 사용

대표적 모델: 관계 모델, XML 모델

 
* 물리적(저수준) 데이터 모델

데이터가 컴퓨터에 어떻게 저장되는지 세부 사항을 명시

하드웨어에 의존적 일반인의 이해가 어려움

레코드 형식 레코드 순서, 접근경로 정의

 
개념적 -> 표현 데이터 -> 물리적

물리적(저수준)데이터 모델은 DBMS가 표현해준다.

 
 
스키마, 인스턴스, 데이터베이스 상태

* 데이터 베이스 스키마

데이터 베이스에서 데이터가 어떤식으로 구조화 되있는지에 대한 설계도

한번 최초에 제작 후에는 잘 변경되지 않는다.

 
* 스키마 다이어그램

데이터들이 어떤 형태를 갖는지 그림으로 표현

* 인스턴스 또는 어커런스

데이터베이스에 들어있는 데이터들

ex) student는 이름, 학번, 반, 전공 등의 스키마에 대한 데이터인 인스턴스를 갖는다.

-> 데이터는 자주 변경되기에 인스턴스들은 자주 변경된다.

이때 특정 시점에서 데이터 베이스에 들어있는 데이터들의 집합을 상태 또는 스냅샷이라 한다.

데이터를 읽기만 한다면 같은 값을 같기에 상태가 변하지 않고 정보에 대한 갱신시에만 변한다.

DBMS는 데이터베이스에 상태가 변경될시 확인을 하는 역할을 수행한다.

 
* 스키마 진화

스키마의 경우 앞서 잘 변경되지 않는다 하였지만 스키마의 추가, 삭제와 같이 특수한 경우 변경이 있을 수 있으며 이 과정을 스키마 진화라 한다.

대부분의 DBMS는 스키마 진화를 지원한다.

 
 
3단계 스키마 아키텍처

데이터 베이스의 중요한 3가지 특징

- 프로그램과 데이터의 분리, 다중 뷰 지원, 카탈로그(메타 데이터) 저장/관리

이러한 3가지 주요 특징을 잘 반영하기 위한 아키텍처가 3단계 스키마 아키텍처(=3단계 데이터베이스 구조)이다.

내부 단계, 개념 단계, 외부 단계가 존재한다.

내부 단계(DBMS가 주로 보고 관리하는 단계): 내부 스키마

-> 실제 저장장치가 어떻게 저장되어 있는지 결정한다. (쉬움 탐색, 저장을 위해)

개념 단계(모든 사용자를 위한 전체 데이터): 개념 스키마

-> 데이터 베이스에 들어가는 전체적인 데이터의 모습을 설계

외부 단계(특정 사용자가 보는 데이터): 외부 스키마

-> 개념 단계에서 만들어진 전체 데이터에 대해 여러 뷰를 가지고 사용자에 따른 뷰를 제공

 
3단계 스키마의 목적은? separation of concerns(걱정에 대한 분리)

-> 특정 단계에 대해서만 생각하고 나머지 관계에 대한 걱정을 덜기위해

데이터 독립성

- 하위 단계의 내용을 상위 단계에서 감추어 하위 단계의 변경이나 문제에 대해 영향을 받지 않도록 한다.

논리적 데이터 독립성(개념 단계와 외부 단계의 분리) - 최종 사용자들은 전체적 데이터의 구조가 변하더라도 상관하지 않고 사용가능하다.

물리적 데이터 독립성(내부 단계와 개념 단계의 분리) - 주로 작업하는 단계인 개념 단계에서 테이블에 대한 속성을 변경해도 저장 단계에서는 신경 쓰지 않아도 된다. 하위에서 인덱싱 방법에 대한 변동이 있더라도 작업하는 개념 단계에서는 신경 쓰지 않아도 된다.

 
 
데이터 베이스 언어

데이터 베이스의 스키마를 정의하고 이에 따라 저장되어있는 데이터를 검색하고 변경할 언어가 필요

데이터 베이스 언어는 크게 2가지

데이터 베이스 스키마를 정의 하기위한 data definition language

값들을 검색하고 조작하기 위한 data manipulation language

 
DDL: 데이터 정의어

스키마(내부, 개념, 외부 스키마)를 정의할 수 있도록 하는 언어

예) CREATE TABLE(개념 스키마를 만들기 위해), CREATE INDEX/DROP INDEX(내부 스키마 정의), CREATE VIEW(외부 스키마 정의)

 
DML: 데이터 조작어

스키마가 저장되면 이를 검색, 삽입, 삭제, 업데이트하기 위해 사용

DML이나 DDL은 따른 언어로 존재하는 것이 아닌 SQL안에 안에 있다.

이러한 언어를 우리가 사용하기 위한 범용 프로그래밍 언어(호스트 언어)내에서 사용한다.

 
 
DBMS 접근방에 따른 아키텍처의 분류

* 중앙 집중식 DBMS 아키텍처

메인 프레임과 터미널로 구성, 메인 프레임에 터미널들이 전용선으로 연결되어 메인 프레임에서 작업 진행시 터미널을 통해 출력, 입력

현재는 잘 사용하지 않는다.

 
* 클라이언트/서버 아키텍처

중앙 집중식 아키텍처와 유사하나 메인프레임은 고성능 컴퓨터를 갖는 서버(DBMS가 동작), 프레임은 PC(클라이언트: 단순 입출력이 아닌 응용프로그램이 동작되어 데이터에 대한 요구사항만을 서버에 요청하여 전달받는다)로 대체되었다. 선 또한 전용선이 아닌 표준화된 일반적 네트워크 선으로 대체되었다.

서버와 PC 사이에는 인터페이스(API)가 존재한다. 언어별로 ODBC/JDBC 등의 표준화된 인터페이스 존재한다.

즉, 클라이언트는 응용프로그램을 수행, 서버는 질의와 트랜잭션을 처리한다.

 
* 웹 응용을 위한 3층 클라이언트/서버 아키텍처

클라이언트/데이터 베이스 서버 사이에 웹서버나 어플리케이션 서버가 추가되었다.

어플리케이션은 직접 데이터 베이스에 접근하지 않고 웹서버/어플리케이션 서버에 접속하고 웹서버/ 어플리케이션 서버는 다시 데이터에 대한 접근이 필요시 데이터 베이스에 접근한다.

어플리케이션 서버에는 ASP.NET, JSP, PHP, Python Flask, Django가 있다.

 
* 내장형(임베디드) 데이터 베이스

클라이트/서버 아키텍처는 서버와 클라이언트가 분리되어 원격으로 접근하나 임베디드 데이터 베이스는 응용 프로그램 내에 임베디드 데이터 베이스 라이브러리를 갖는다. 이는 소형이며 SQLite, Berkeley DB, Imdb가 있다.

안드로이드 또한 안드로이드 내에 SQLite 데이터 베이스가 내장되어 있다.

