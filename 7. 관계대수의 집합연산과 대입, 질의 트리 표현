관계대수의 집합 연산

릴레이션들은 튜플들의 집합이기에 집합의 특성을 지닌다.

1. 중복이 되는 원소가 없다.

2. 순서가 없다.

 
집합 연산자

합집합(∪), 교집합(∩), 차집합(-)

두 개의 릴레이션 R1(4X2), R2(2X2)가 있을 때 합집합 연산을 하게 된다면 6X2의 새로운 릴레이션이 생긴다. 이처럼 집합연산이 되려면 애트리뷰트의 개수가 동일해야하며 대응되는 애트리뷰트들의 도메인이 호환성을 가져야한다.

 
합집합 연산

ex) 학생이름과 학교 이름을 열거하라

π cname(college) ∪ π sname(student)

 
차집합 연산

ex) 어느 학교에도 지원하지 않은 학생의 아이디를 구하라

π sid(student) - π sid(apply)

 
ex) 어느 학교에도 지원하지 않은 학생의 아이디와 이름을 구하라

π sid,sname((π sid(student) - π sid(apply)) ⋈ student)

 
교집합 연산

ex) 학생 이름과 학교 이름으로 동시에 사용되는 이름을 구하라

π cname(college) ∩ π sname(student)

교집한 연산은 연산의 능력을 증가시키지 않기에 꼭 필요한 연산자는 아니다.

 
재명명(rename) 연산

ρ s(b1,b2,,,,bn)(E) 릴레이션 이름과 애트리뷰트 이름을 모두 변경

s : 새로운 릴레이션의 이름

b1, b2 ,,, bn : 새로운 애트리뷰트의 이름

p s(E) : 릴레이션 이름 변경

p (b1,b2,,,bn)(E) : 애트리뷰트의 이름 변경

 
1. 집합 연산의 결과 통합을 위해

ex) 학생 이름과 학교 이름 열거

ρ c(name) (π sname(student)) ∪ ρ c(name) (π name(college))

=> relation name: c , attribute name: name

 
2. 셀프 조인 연산 시 이름간의 모호함을 제거하기 위해

ex) 같은 주에 있는 학교의 쌍을 열거

π c1, c2 (σ s1=s2 ^ c1>c2 (ρ A(c1,s1,e1)college X ρ B(c2,s2,e2) college))

 
 
대입(assign)을 통한 다른 표현법

긴 관계 대수 연산을 중간 결과를 보여주면 표현하기 적합

ex) 같은 주에 있는 학교의 쌍을 열거

X : = ρ A(c1,s2,e1)(college)

Y : = ρ B(c2,s2,e2)(college)

Z : = X x Y

W : = σ s1=s2 ^ c1>c2 Z

Answer : = π c1,c2(W)

 
