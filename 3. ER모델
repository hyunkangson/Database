ER모델을 사용한 데이터 모델링(데이터 베이스 설계)

 
고객 요구사항 분석

데이터 베이스 설계는 여러 정보를 컴퓨터 속에 저장 검색 등 다룰 수 있도록 만드는 것이다.

데이터 베이스 설계시 가장먼저 할 일은 요구사항 수집과 분석이다. (요구하는 정보 및 사용주체)

이를 기반으로 데이터 베이스를 설계하며 기업, 학교, 정부에 대한 전산화에 있어 데이터 베이스는 핵심이다.

개념적 설계(추상적인 설계) -> 논리적 설계(개념적 설계의 구체화) -> 물리적 설계(최적화, 앞의 두 설계는 사람이 하나 물리적 설계는 DBMS가 수행)

개념적 요구사항을 바탕으로 개념적 설계를 한 것을 ER Diagram이라한다.

 
 
ER(Entity relation) 모델

ER다이어그램에서 가장 중요한 요소에는 엔티티와 에트리뷰트가 있다.

엔티티는 실제 세상에서 존재하는 실체가 있는 물체, 사람을 말하며 이들은 자신 자신만의 특성을 표현하는 애트리뷰트를 가진다.

엔티티 타입: 같은 애트리뷰트를 갖는 엔티티들의 집합

엔티티 타입은 스키마에 해당하고 엔티티는 인스턴스에 해당한다.

복합 애트리뷰트: 더 작은 요소로 나뉜다.

단순 애트리뷰트

단일 값 애트리뷰트: 단 하나의 값을 가진다

다치 애트리뷰트: 애트리뷰트 하나가 여러 값을 가질 수 있다. ex) 한 사람은 여러개의 취미를 갖는다. 동그라미 두개로 표시

저장된 애트리뷰트: 대부분의 애트리뷰트는 실제 값을 갖는 저장된 애트리뷰트이다.

유도된 애트리뷰트: 저장되어 있지 않고 다른 애트리뷰트로부터 값을 유도하여 얻는다.(점선 표시)

ex) 나이, 나이는 해가 바뀌면 기존의 데이터가 틀린 데이터가 되기에 저장이 아닌 생년월일로부터 유도를 해서 데이터를 얻어야 한다.

키 애트리뷰트: 엔티티는 속성을 갖는데 이 속성들이 같은 경우 이를 구분하기 위한 키 속성이 필요하다. 그러나 하나의 키를 가지고 구분하기 힘들고 두 개 이상의 키를 통해 구분해야 할 경우를 복합키라 한다.

ex) 주민등록번호의 앞 자리, 뒷 자리 자동차의 등록 번호, 차량 고유 번호

 
 

db에 대한 초기 개념적 설계

엔티티타입이 가진 속성 중 다른 엔티티를 참조하는 속성이 있으면 이에 대한 연결로 속성을 표현해야 하며 이를 연결 시켜주는 것이 관계고 이 타입이 관계 타입이다.

 
 
관계와 관계타입

관계 타입은 엔티티들 간의 연결을 모아놓은 집합이며 이름을 갖고 있고 이름을 통해 살펴볼 수 있다.

차수: 관계에 참여하고 있는 엔티티 타입의 수

역할 이름: 관계 타입에 참여하는 각 엔티티 타입은 관계내에서 특정한 역할을 담당한다.

일반적으로 관계에 참여하는 관계 타입이 다르면 그 이름 자체가 역할로서 사용되기 때문에, 역할 이름을 특별히 명시하지 않는다.

한 관계 타입이 관계에 두 번 이상 참여하면, 역할을 구분하기 위해, 역할 이름을 부여하거나, 대응하는 번호 등을 부여한다.

 
카디널리티 비율: 엔티티들이 관계에 참여하는 최대 비율(1:1, 1:n, m:n)

모든 엔티티가 관계에 참여함을 전체참여, 일부만이 참여함을 부분참여라 한다.

전체 참여하는 경우 이중선으로서 나타낸다.

 
관계타입의 애트리뷰트

관계 타입도 엔티티처럼 애트리뷰트들을 가질 수 있다.

1:1 관계 타입의 애트리뷰트: 양쪽 엔티티 타입으로 이동 가능

1:n 관계 타입의 애트리뷰트: n쪽 엔티티 타입으로 이동 가능

m:n 관계 타입의 애트리뷰트: 엔티티 타입으로 이동 불가

 
 
약한 엔티티 타입

자신의 키 애트리뷰트가 없는 엔티티 타입

다른 엔티티 타입의 키 애트리뷰트와 관계를 가짐으로써 존재가 가능하다.

여기서 약한 엔티티 타입과 연결된 엔티티 타입을 식별 엔티티 타입이라 하며 관계를 식별 관계 타입이라 한다.

약한 엔티티 타입과 이의 식별 관계는 이중선으로, 부분키는 점선 밑줄로 표현한다.

 
명명 규칙

일반적으로 명사는 엔티티 타입, 동작은 관계 타입으로 설계 하는 것이 도움된다.

설계 시 왼쪽에서 오른쪽, 위에서 아래로 읽기 쉽게 작성한다.

 
 
다른 표기법

최소값, 최대값을 사용한 표기법
