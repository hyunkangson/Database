트랜잭션: 하나의 단일 작업으로 간주되는 하나 또는 그 이상의 연속된 SQL작업들



트랜잭션의 필요성

1. 동시 작업을 가능하게 한다.

데이터 베이스에 여러 사용자가 동시에 접근하여 사용하는 것을 가능하게 한다.

2. 고장 감내성을 부여한다.

고장 시 데이터베이스의 상태를 보장할 수 있다.



동시 접근시의 문제점: 애트리뷰트 수준의 모순

ex)

s1: update college set enrollment = enrollment + 1000

    where cName = 'stanford'

s2: update college set enrollment = enrollment + 1500

    where cName = 'stanford'

하나의 수행 결과가 store되고 다른 하나의 수행 결과가 store되는 것이 아닌 동시에 수행된다면 +2500이 된 결과가 아닌 +1000 혹은 +1500이 된 결과가 저장된다. 이는 어떠한 순서로 수행되더라도 나올 수 없는 값이기에 데이터베이스가 원래 원하는 값이 아닌 문제가 발생된다.



동시 접근시의 문제점: 테이블 수준의 모순

ex)

s1: update Apply set decision='Y'

    where sID in (selec sID from Student where GPA > 3.9)

s2: update Student set GPA=(1.1)*GPA where sizeHS > 2500

s1과 s2가 어떤 순서로 수행되던 dbms관점에서는 문제가 없으나 동시에 이들이 수행된다면 만약 s2의 모든 update가 수행되기전에 s1의 수행으로 GPA>3.9 이상의 값을 가져가 update가 된다면 문제가 발생한다.



동시 접근시 문제점을 해결하기 위해서는 각각의 스테이트먼트가 별로도 분리돼서 수행한것과 같은 효과를 만들어야 한다. (isolation)

- 가장 간단한 해결책은 실제로 각각 분리되서 수행하는 것이다. (하지만 이 경우 데이터베이스의 처리 성능이 매우 낮아진다.)

- 동시 접근해도 안전한 경우 최대한 동시 접근이 가능하도록 해야한다. (DBMS lock을 사용한다 - 처리 중인 데이터에 대해 lock을 건다.)



고장에 대한 감내성

시스템에서 작업의 중간에 어떤 시점에 고장이 일어나더라도 all-or-nothing이 보장되어야 한다.

all-or-nothing: 수행하는 작업의 전체를 하나의 트랜잭션으로 묶는다면 전체가 수행되거나 수행되지 않음의 2가지 상태만을 지닌다.



트랜잭션

하나의 단일 작업으로 간주되는 하나 또는 그 이상의 연속된 SQL작업들

트랜잭션들은 각각이 분리되어 별도로 수행되는 것과 같은 결과를 얻는다.

시스템이 고장하는 경우, 각각의 트랜잭션이 만든 변경은 모두 반영되거나 전혀 반영되지 않는다.



트랜잭션의 사용은 SQL 표준에 명시되어 있다.

- 첫 SQL 문장이 수행될 때 자동으로 트랜잭션이 시작된다.

- commit이 수행되면 현재 트랜잭션은 종료하고 다음 트랜잭션이 시작된다. (트랜잭션의 시작부터 끝까지가 하나의 트랜잭션으로 묶인다.)

- autocommit은 각각의 SQL문장이 트랜잭션



트랜잭션의 4가지 성질 ACID

Atomocity(원자성): 트랜잭션에 포함된 작업은 전부 수행되거나 전부 수행되지 않아야 한다.

Consistency(일관성 보존): 트랜잭션을 수행하기 전이나 수행한 후나 데이터베이스는 항상 일관된 상태를 유지해야 한다.

Isolation(고립성): 수행중인 트랜잭션에 다른 트랜잭션이 끼어들어 변경 중인 데이터를 훼손하는 일이 없어야 한다.

Durability(지속성): 수행을 성공적으로 완료한 트랜잭션은 변경한 데이터가 모두 데이터베이스에 영구히 남아있어야 한다.





 
